#!/usr/bin/env python3

import zlib
from nsl.framed import Framed
import sys

class Crc:
    def __init__(self, state = 0):
        self.state = state

    def update(self, data):
        self.state = 0xffffffff ^ zlib.crc32(data, 0xffffffff ^ self.state)

    def digest(self):
        return self.state.to_bytes(4, "little")

class Stream:
    def __init__(self, framed, crc = None):
        self.framed = framed
        self.crc = crc

    def frame(self, data, commit = True):
        if self.crc:
            c = self.crc()
            c.update(data)
            data += c.digest()
        if commit:
            data += b'\x01'
        else:
            data += b'\x00'
        self.framed.put(data)
            
if __name__ == "__main__":
    n = sys.argv[1]

    f = Framed(n)
    s = Stream(f, Crc if "crc" in n else None)

    s.frame(b"hello, world")
    s.frame(b"known bad", commit = False)
    s.frame(b"")
    s.frame(b"\x00")
