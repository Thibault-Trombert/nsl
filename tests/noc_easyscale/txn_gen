#!/usr/bin/env python2

import sys

class NocTxnFile:
    def __init__(self, filename):
        self.output = open(filename, "w")
        self.pending = []

    def append(self, flit):
        self.pending.append(flit)

    def header(self, src, dst, tag):
        self.append(Header(src, dst, tag))

    def flush(self):
        flit = sum(self.pending, Flit([]))
        self.pending = []
        self.output.write("%d %d\n" % (len(flit), 0))
        for b in flit:
            self.output.write("%d %d\n" % (b, 0))

class Flit:
    def __init__(self, data):
        self.data = data

    def __iter__(self):
        return iter(self.data)

    def __len__(self):
        return len(self.data)

    def __iadd__(self, other):
        self.data += other.data

    def __add__(self, other):
        return self.__class__(self.data + other.data)

class Header(Flit):
    def __init__(self, src, dst, tag):
        Flit.__init__(self, [dst + src * 16, tag])

class EasyscaleWriteCmd(Flit):
    def __init__(self, dev_addr, reg_addr, data):
        Flit.__init__(self, [dev_addr, (reg_addr << 5) | data])

class EasyscaleWriteRsp(Flit):
    def __init__(self, ack):
        Flit.__init__(self, [ack])

class EasyscaleCmd(NocTxnFile):
    def __init__(self, filename):
        NocTxnFile.__init__(self, filename)

    def write(self, dev_addr, reg_addr, data):
        self.append(EasyscaleWriteCmd(dev_addr, reg_addr, data))

class EasyscaleRsp(NocTxnFile):
    def __init__(self, filename):
        NocTxnFile.__init__(self, filename)

    def write(self, dev_addr, reg_addr, data):
        self.append(EasyscaleWriteRsp(0))

if __name__ == "__main__":
    n = sys.argv[1]

    if n.startswith("ez_rsp"):
        t = EasyscaleRsp(n)
    else:
        t = EasyscaleCmd(n)

    t.header(0, 0, 1)
    t.write(0, 0, 42)
    t.flush()

    t.header(0, 0, 2)
    t.write(0xa6, 3, 123)
    t.flush()

    for i in range(16):
        t.header(0, 0, i*16)
        t.write(i, i & 3, i * 0x11)
        if isinstance(t, EasyscaleCmd):
            t.append(Flit([0x55] * i))
        t.flush()
        
