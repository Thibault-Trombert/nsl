#!/usr/bin/env python3

import sys
from nsl import framed

class Txn:
    def __init__(self, target, header):
        self.target = target
        self.header = header
        self.cmds = []

    def flush(self, tag, wait = 100):
        if not self.cmds:
            return

        frame = [self.header, tag] + list(self.cmds)
        self.target.put(frame, end_delay = wait)
    
class CsCmd(Txn):
    def write(self, reg, val):
        self.cmds += [reg]
        for i in range(4):
            self.cmds += [(val >> (8 * i)) & 0xff]

    def read(self, reg, val):
        self.cmds += [0x80 | reg]
            
class CsRsp(Txn):
    def write(self, reg, val):
        self.cmds += [reg]

    def read(self, reg, val):
        self.cmds += [0x80 | reg]
        for i in range(4):
            self.cmds += [(val >> (8 * i)) & 0xff]

class Dp(Txn):
    def reset(self, idcode):
        self.run(1, 50)
        self.bitbang(0xe79e, 16)
        self.run(1, 50)
        self.run(0, 10)
        self.read(0, 0, idcode)

    def turnaround(self, n):
        self.cmds += [0xd0 | (n-1)]
        
class DpCmd(Dp):
    def read(self, ap, ad, val):
        if ap:
            self.cmds += [0xb0 | (ad & 0x3)]
        else:
            self.cmds += [0x90 | (ad & 0x3)]

    def write(self, ap, ad, val):
        if ap:
            self.cmds += [0xa0 | (ad & 0x3)]
        else:
            self.cmds += [0x80 | (ad & 0x3)]
        for i in range(4):
            self.cmds += [(val >> (8 * i)) & 0xff]

    def run(self, val, cycles):
        while cycles:
            c = min((cycles, 64))
            cycles -= c
            self.cmds += [(int(bool(val)) << 6) | ((c - 1) & 0x3f)]

    def bitbang(self, value, length):
        self.cmds += [0xe0 | ((length - 1) & 0x1f)]
        for i in range(4):
            self.cmds += [(value >> (8 * i)) & 0xff]

class DpRsp(Dp):
    def read(self, ap, ad, val):
        if ap:
            self.cmds += [(0xb1, 0xf7 if val is None else 0xff)]
        else:
            self.cmds += [(0x91, 0xf7 if val is None else 0xff)]
        if val is not None:
            for i in range(4):
                self.cmds += [(val >> (8 * i)) & 0xff]
        else:
            for i in range(4):
                self.cmds += [(0, 0)]

    def write(self, ap, ad, val):
        if ap:
            self.cmds += [0xa1]
        else:
            self.cmds += [0x81]
        
    def run(self, val, cycles):
        while cycles:
            c = min((cycles, 64))
            cycles -= c
            self.cmds += [(int(bool(val)) << 6) | ((c - 1) & 0x3f)]

    def bitbang(self, value, length):
        self.cmds += [0xe0 | ((length - 1) & 0x1f)]

if __name__ == "__main__":
    n = sys.argv[1]

    f = framed.Framed(n)
    if n.startswith("swd_res"):
        t = DpRsp(f, 0x0f)
        c = CsRsp(f, 0x1f)
    else:
        t = DpCmd(f, 0xf0)
        c = CsCmd(f, 0xf1)

    t.reset(0x2ba01477)
    t.flush(1)

    c.write(0, 2 * 1024 * 1024)
    c.write(1, 1)
    c.flush(1)

    t.write(False, 2, 0x1)
    t.write(False, 1, 0x300)
    t.turnaround(4)
    t.run(0, 20)
    t.flush(1)

    t.read(False, 0, 0x2ba01477)
    t.flush(1)

    t.write(True, 0, 0xdecafbad)
    t.run(0, 20)
    t.read(True, 0, None)
    t.run(0, 20)
    t.read(False, 3, 0xdecafbad)
    t.flush(1)

    c.write(0, int(25e6 * 2))
    c.flush(1)
    
    t.write(True, 0, 0xdecafbad)
    t.run(0, 20)
    t.read(True, 0, None)
    t.run(0, 20)
    t.read(False, 3, 0xdecafbad)
    t.flush(1)
    
