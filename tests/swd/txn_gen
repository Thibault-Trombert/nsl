#!/usr/bin/env python3

import sys

class NocTxnFile:
    def __init__(self, filename):
        self.output = open(filename, "w")
        self.cmds = []

    def put(self, data, mask, length, more):
        self.output.write("%d" % int(bool(more)))
        for i in range(length - 1, -1, -1):
            v = (data >> i) & 1
            m = (mask >> i) & 1
            if m:
                self.output.write("%d" % v)
            else:
                self.output.write("-")
        self.output.write(" %d\n" % 0)

    def flush(self, header, tag):
        if not self.cmds:
            return

        self.put(header, 0xff, 8, 1)
        self.put(tag, 0xff, 8, 1)
        for i, c in enumerate(self.cmds):
            try:
                v, mask = c
            except:
                v = c
                mask = 0xff
            self.put(v, mask, 8, i != len(self.cmds) - 1)
        self.cmds = []

class SwdCmd(NocTxnFile):
    def read(self, ap, ad, val):
        if ap:
            self.cmds += [0x00 | (ad & 0x3f)]
        else:
            self.cmds += [0xb8 | (ad & 0x03)]

    def write(self, ap, ad, val):
        if ap:
            self.cmds += [0x40 | (ad & 0x3f)]
        else:
            self.cmds += [0xb4 | (ad & 0x03)]
        for i in range(4):
            self.cmds += [(val >> (8 * i)) & 0xff]

    def reset(self, idcode):
        self.cmds += [0xb0]

    def div(self, d):
        self.cmds += [0xbe, d & 0xff, d >> 8]

class SwdRsp(NocTxnFile):
    def read(self, ap, ad, val):
        if ap:
            self.cmds += [0x11]
        else:
            self.cmds += [0x31]
        for i in range(4):
            self.cmds += [(val >> (8 * i)) & 0xff]

    def write(self, ap, ad, val):
        if ap:
            self.cmds += [(0x01, 0xf7)]
        else:
            self.cmds += [(0x21, 0xf7)]

    def reset(self, idcode):
        self.cmds += [(0x51, 0xf0)]
        for i in range(4):
            self.cmds += [(idcode >> (8 * i)) & 0xff]

    def div(self, d):
        self.cmds += [(0x40, 0xf0)]
            
if __name__ == "__main__":
    n = sys.argv[1]

    if n.startswith("swd_responses"):
        t = SwdRsp(n)
    else:
        t = SwdCmd(n)

    t.reset(0xdeadbeef)
    t.div(0x2)
    t.write(1, 0, 42)
    t.read(1, 0, 42)
    t.flush(0, 0)
    
    t.write(0, 1, 123)
    t.read(0, 1, 123)
    t.read(1, 0, 42)
    t.flush(0, 1)

    t.reset(0xdeadbeef)

    for s in (0, 1, 2, 3, 4, 10, 50):
        t.div(s)
        t.reset(0xdeadbeef)
        last = 0
        for i in range(32):
            t.write(1, i >> 2, i * 0x11111111)
            if i & 1:
                t.read(1, i >> 2, i * 0x11111111)
            if i & 2:
                t.read(1, i >> 2, i * 0x11111111)
            if i % 3 == 0:
                t.flush(0, last)
                last = i
        t.flush(0, last)
